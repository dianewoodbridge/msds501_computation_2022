{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cd85bb6c-b8af-426c-b511-8500ffb019a8",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Generator  vs Iterator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9a54c06-4224-407a-8152-d5dbc3f1ef20",
   "metadata": {},
   "source": [
    "#### Iterator : \n",
    "Object that can iterate sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5206a9e6-bc99-4b9e-8e35-094f8733ddfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "lit = [1,2,3,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6141c55-e983-4a60-99e7-c0f6dee6fe83",
   "metadata": {},
   "outputs": [],
   "source": [
    "it = iter(lit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1504566-cceb-4bb2-abc8-052b8ab36f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "next(it)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1598077-3556-44cd-9826-8cc701f9558a",
   "metadata": {},
   "source": [
    "for loop creates an iterator to iterate elements"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a55acdb7-2c7c-4bce-831f-86d66b67eed3",
   "metadata": {},
   "source": [
    "#### Generator :\n",
    "creates an iterator\n",
    "To create generator, you need to create a function that \"yield\" output\n",
    "\n",
    "Generator uses \"yield\" to return output which can accumulate outputs and return."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3392c1d-cb35-416e-8247-0a1c3de9c1ef",
   "metadata": {
    "tags": []
   },
   "source": [
    "Return Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0613ae63-e993-4764-8f2f-129a13be26c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def return_func(nums):\n",
    "    for num in nums:\n",
    "        return num * num # return escapes the fuction rather than going throug all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54231d29-48f5-4aa7-9ced-f1cc177ef7ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "return_func(lit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77c375b3-deca-49fc-9d44-047ebf36ad08",
   "metadata": {},
   "outputs": [],
   "source": [
    "def yield_func(nums):\n",
    "    for num in nums:\n",
    "        yield num * num  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60f34f14-e340-43cb-9ccf-9919f6630049",
   "metadata": {},
   "outputs": [],
   "source": [
    "it = yield_func(lit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "543c4243-9698-4791-a5ea-07df2fc60a53",
   "metadata": {},
   "outputs": [],
   "source": [
    "sum(it)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b88e81cd-e976-4fe0-8d07-65260f2e0cc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def funct(lit):\n",
    "    print(\"-------\")\n",
    "    for item in lit:\n",
    "        if(item % 2 == 0):\n",
    "            yield item * 2\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9df1cee-a735-4f5d-842d-8130635ce8a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "it = funct(lit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f631cb73-7333-4bc0-8e13-b0d4a8d0938b",
   "metadata": {},
   "outputs": [],
   "source": [
    "next(it) # only being called once"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "804456a7-d508-4b68-a2b7-6521fd7dcdc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "next(it)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b15fd6c1-fcde-4039-abac-0015a3dbbc8c",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Decorator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07942842-3b4f-420b-8d30-856dc7e89a98",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Useful for extending or adding extra functionalities on your existing function + Readbility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46a0a640-75e5-4662-a353-c950496cc9fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_dot(f):\n",
    "    def inner(arg):\n",
    "        print(f'{arg}')\n",
    "        return f(arg) + '.'\n",
    "    return inner\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bf6aa3f-e22a-404e-af7e-ff2b7af168e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "@add_dot\n",
    "def lower_it(sentence):\n",
    "    return sentence.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25758208-09a6-4afb-90e0-13c64dc73e00",
   "metadata": {},
   "outputs": [],
   "source": [
    "sentence = 'I LIKE IT'\n",
    "lower_it(sentence)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fb08b02-dae2-4cb1-b4f4-3c926387a574",
   "metadata": {
    "tags": []
   },
   "source": [
    "## How to easily figure out functions - argument and output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee9c4cc4-9474-4119-b2dd-e5189fe511c1",
   "metadata": {},
   "source": [
    "Use help() function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d5aa892-de4a-4515-9268-8fa12e38f550",
   "metadata": {},
   "outputs": [],
   "source": [
    "help('pow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd8e982d-1b53-4d3e-a050-99acdd3e0b61",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "help('numpy.sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4eb9dcca-af1c-4d4e-aba7-4eaa48f1be62",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
